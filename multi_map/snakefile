from Script import get_fastq_metrics, flagstat_report, get_reference_metrics
from pathlib import Path
import os

configfile:"Config/config.yaml"

# Defining input directories.

FASTQ_DIR = config["fastq_dir"]
REFERENCE_DIR = config["reference_dir"]
ANALYSIS_DIR = config["analysis_dir"]

# Generate lists of files to use as input.

fastq_files = [fastq for fastq in os.listdir(FASTQ_DIR) if fastq.endswith(".fastq.gz")]
reference_files = [fasta for fasta in os.listdir(REFERENCE_DIR) if fasta.endswith((".fasta"))]

SAMPLES = list(set([fastq.split("_R")[0] for fastq in fastq_files]))
REFERENCES = [fasta.split(".")[0] for fasta in reference_files]

#Snakemake rules:

rule all:
    """Rule to execute the entire pipeline."""
    input:
        flagstat =expand("{analysis_dir}/Metrics/{genome}/{sample}.flagstat", 
            analysis_dir=ANALYSIS_DIR, genome=REFERENCES, sample=SAMPLES),
        report = f"{ANALYSIS_DIR}/Metrics/final.csv",
        temporary_report = f"Ressources/flagstat.csv",
        reference_report = f"Ressources/references.csv"

rule bwa_index:
    """Index reference genome files using BWA."""
    input:
        ref = f"{REFERENCE_DIR}/{{genome}}.fasta"
    output:
        amb = f'{REFERENCE_DIR}/{{genome}}.fasta.amb',
        ann = f'{REFERENCE_DIR}/{{genome}}.fasta.ann',
        bwt = f'{REFERENCE_DIR}/{{genome}}.fasta.bwt',
        pac = f'{REFERENCE_DIR}/{{genome}}.fasta.pac',
        sa  = f'{REFERENCE_DIR}/{{genome}}.fasta.sa'
    shell:
        """
        bwa index {input.ref}
        """

rule reference_metrics:
    """Get information related to references used in CSV format for final report."""
    input:
        fasta_files=expand(f"{REFERENCE_DIR}/{{genome}}.fasta", genome=REFERENCES)
    output:
        reference_report="Ressources/references.csv"  # CSV file stored in Ressources for generating HTML report.
    run:
        fasta_paths = [Path(fasta) for fasta in input.fasta_files]
        get_reference_metrics.get_reference_info(fasta_paths, output.reference_report)

rule bwa_map:
    """Align paired FASTQ files to the reference genome using BWA and convert to BAM format."""
    input:
        read_1 = f"{FASTQ_DIR}/{{sample}}_R1.fastq.gz",
        read_2 = f"{FASTQ_DIR}/{{sample}}_R2.fastq.gz",
        genome = f"{REFERENCE_DIR}/{{genome}}.fasta",
        index_files = rules.bwa_index.output,  

    output:
        bam = temp(f"{ANALYSIS_DIR}/Mapped_reads/{{genome}}/{{sample}}.bam"),

    shell:
        """
        bwa mem {input.genome} {input.read_1} {input.read_2} | samtools view -Sb - > {output.bam}
        """

rule samtools_sort:
    input:
        bam = rules.bwa_map.output.bam
    output:
        sorted_bam = f"{ANALYSIS_DIR}/Mapped_reads/{{genome}}/{{sample}}.sorted.bam"

    shell:
        """
        samtools sort {input.bam} -o {output.sorted_bam}
        """

rule samtools_index:
    """Index sorted BAM files."""
    input:
        sorted_bam = rules.samtools_sort.output.sorted_bam
    output:
        index = f"{ANALYSIS_DIR}/Mapped_reads/{{genome}}/{{sample}}.sorted.bam.bai"

    shell:
        """
        samtools index {input.sorted_bam}
        """

rule samtools_flagstat:
    """Generate flagstat report for each BAM file."""
    input:
        sorted_bam = rules.samtools_sort.output.sorted_bam,
        indexed_bam = rules.samtools_index.output.index
    output:
        flagstat = f"{ANALYSIS_DIR}/Metrics/{{genome}}/{{sample}}.flagstat"
    
    shell:
        """
        samtools flagstat {input.sorted_bam} > {output.flagstat}
        """

rule final_report:
    """Generate a final CSV report from all flagstat files."""
    input:
        flagstat =expand("{analysis_dir}/Metrics/{genome}/{sample}.flagstat", 
            analysis_dir=ANALYSIS_DIR, genome=REFERENCES, sample=SAMPLES)
    output:
        user_report = f"{ANALYSIS_DIR}/Metrics/final.csv",
        temporary_report = f"Ressources/flagstat.csv" # Same file stored in Ressources for generating HTML report.
    
    run:
        flagstat_paths = [Path(flagstat) for flagstat in input.flagstat]
        
        flagstat_report.gather_flagstats(flagstat_paths, output.user_report, output.temporary_report)
