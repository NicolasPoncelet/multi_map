from Script import fastq_metrics, flagstat_metrics, reference_metrics, output_files

from pathlib import Path
import os

configfile:"Config/config.yaml"

# Defining input directories.

FASTQ_DIR = Path(config["fastq_dir"]).resolve()
REFERENCE_DIR = Path(config["reference_dir"]).resolve()
ANALYSIS_DIR = Path(config["analysis_dir"]).resolve()

# Generate lists of files to use as input.
fastq_files = list(FASTQ_DIR.glob("*.fastq.gz"))
reference_files = list(REFERENCE_DIR.glob("*.fasta"))

SAMPLES = list(set([fastq.stem.split("_R")[0] for fastq in fastq_files]))
REFERENCES = [fasta.stem for fasta in reference_files]

#Snakemake rules:

rule all:
    """Rule to execute the entire pipeline."""
    input:
        output_files.get()

rule bwa_index:
    """Index reference genome files using BWA."""
    input:
        ref = f"{REFERENCE_DIR}/{{genome}}.fasta"
    output:
        amb = f'{REFERENCE_DIR}/{{genome}}.fasta.amb',
        ann = f'{REFERENCE_DIR}/{{genome}}.fasta.ann',
        bwt = f'{REFERENCE_DIR}/{{genome}}.fasta.bwt',
        pac = f'{REFERENCE_DIR}/{{genome}}.fasta.pac',
        sa  = f'{REFERENCE_DIR}/{{genome}}.fasta.sa'
    conda:
        config["conda_env"]
    shell:
        """
        bwa index {input.ref}
        """

rule get_reference_metrics:
    """Get information related to references used in CSV format for final report."""
    input:
        fasta_files=expand(f"{REFERENCE_DIR}/{{genome}}.fasta", genome=REFERENCES) # Pourquoi n'est il pas possible de linker l'input de la rule n-1 ?
    output:
        reference_report="Ressources/references.csv"  # CSV file stored in Ressources for generating HTML report.
    run:
        fasta_paths = [Path(fasta) for fasta in input.fasta_files] # passer en path dans expand
        reference_metrics.get(fasta_paths, output.reference_report)

rule get_fastq_metrics:
    """Get information related to fastq used in CSV format for final report."""
    input:
        fastq_files=expand(f"{FASTQ_DIR}/{{sample}}{{read}}.fastq.gz", 
        sample=SAMPLES,
        read = ["_R1","_R2"]) 
    output:
        fastq_report="Ressources/fastq.csv"  # CSV file stored in Ressources for generating HTML report.
    run:
        fastq_paths = [Path(fastq) for fastq in input.fastq_files] # passer en path dans expand
        fastq_metrics.get(fastq_paths, output.fastq_report)


rule bwa_map:
    """Align paired FASTQ files to the reference genome using BWA and convert to BAM format."""
    input:
        read_1 = f"{FASTQ_DIR}/{{sample}}_R1.fastq.gz",
        read_2 = f"{FASTQ_DIR}/{{sample}}_R2.fastq.gz",
        genome = f"{REFERENCE_DIR}/{{genome}}.fasta",
        index_files = rules.bwa_index.output,  
    output:
        bam = temp(f"{ANALYSIS_DIR}/Mapped_reads/{{genome}}/{{sample}}.bam"),
    conda:
        config["conda_env"]
    shell:
        """
        bwa mem {input.genome} {input.read_1} {input.read_2} | samtools view -Sb - > {output.bam}
        """

rule samtools_sort:
    input:
        bam = rules.bwa_map.output.bam
    output:
        sorted_bam = f"{ANALYSIS_DIR}/Mapped_reads/{{genome}}/{{sample}}.sorted.bam"
    conda:
        config["conda_env"]
    shell:
        """
        samtools sort {input.bam} -o {output.sorted_bam}
        """

rule samtools_index:
    """Index sorted BAM files."""
    input:
        sorted_bam = rules.samtools_sort.output.sorted_bam
    output:
        index = f"{ANALYSIS_DIR}/Mapped_reads/{{genome}}/{{sample}}.sorted.bam.bai"
    conda:
        config["conda_env"]
    shell:
        """
        samtools index {input.sorted_bam}
        """

rule samtools_flagstat:
    """Generate flagstat report for each BAM file."""
    input:
        sorted_bam = rules.samtools_sort.output.sorted_bam, 
        indexed_bam = rules.samtools_index.output.index # mettre flagstat et index dans le all. retirer index d'ici le mettre dans la rule all plutot.
    output:
        flagstat = f"{ANALYSIS_DIR}/Metrics/{{genome}}/{{sample}}.flagstat"
    conda:
        config["conda_env"]
    shell:
        """
        samtools flagstat {input.sorted_bam} > {output.flagstat}
        """

rule get_flagstat_metrics:
    """Generate a final CSV report from all flagstat files."""
    input:
        flagstat =expand("{analysis_dir}/Metrics/{genome}/{sample}.flagstat", 
            analysis_dir=ANALYSIS_DIR, genome=REFERENCES, sample=SAMPLES)
    output:
        genomic_report = f"{ANALYSIS_DIR}/Metrics/final.csv",
        temp_genomic_report = f"Ressources/flagstat.csv" # Same file stored in Ressources for generating HTML report.
    run:
        flagstat_paths = [Path(flagstat) for flagstat in input.flagstat]
        
        flagstat_metrics.get(flagstat_paths, output.genomic_report, output.temp_genomic_report)

rule final_genome_report:
    """Generate a final HTML report."""
    input:
        flagstat_metrics = rules.get_flagstat_metrics.output.temp_genomic_report,
        reference_metrics = rules.get_reference_metrics.output.reference_report,
        fastq_metrics = rules.get_fastq_metrics.output.fastq_report,
        input_report = Path("Ressources/report.qmd")
    output:
        html_genomic_report = f"{ANALYSIS_DIR}/Metrics/report.html",
    conda:
        config["conda_env"]
    shell:
        """
        quarto render {input.input_report} && mv Ressources/report.html {output.html_genomic_report}
        """
